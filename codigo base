#include "main.h"

// Definição do endereço do MPU-6050
#define MPU6050_ADDR 0x68 << 1 // Endereço I2C do MPU-6050 (shift para HAL)

// Registradores do MPU-6050
#define WHO_AM_I_REG 0x75
#define PWR_MGMT_1   0x6B
#define GYRO_XOUT_H  0x43

// Variáveis para armazenar os dados
I2C_HandleTypeDef hi2c1; // Para o I2C1
uint8_t buffer[6];       // Para armazenar os dados brutos
int16_t gyro_x, gyro_y, gyro_z;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_I2C1_Init();

    // Inicializa o MPU-6050
    uint8_t data = 0;
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);

    while (1) {
        // Lê os valores do giroscópio
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, buffer, 6, HAL_MAX_DELAY);

        // Converte os dados brutos
        gyro_x = (buffer[0] << 8) | buffer[1];
        gyro_y = (buffer[2] << 8) | buffer[3];
        gyro_z = (buffer[4] << 8) | buffer[5];

        // Processa os valores para rad/s (ajustar escala conforme datasheet)
        float gyro_x_rad = gyro_x / 131.0 * (3.14159 / 180.0);
        float gyro_y_rad = gyro_y / 131.0 * (3.14159 / 180.0);
        float gyro_z_rad = gyro_z / 131.0 * (3.14159 / 180.0);

        // Adicione aqui o uso dos valores processados no controle do robô

        HAL_Delay(10); // Ajuste para leitura a 100 Hz
    }
}

// Configuração do I2C1
static void MX_I2C1_Init(void) {
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000; // 100 kHz
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    HAL_I2C_Init(&hi2c1);
}

// Funções adicionais (Relógio e GPIO)
void SystemClock_Config(void) {
    // Configuração padrão gerada pelo STM32CubeMX
}
static void MX_GPIO_Init(void) {
    // Configuração padrão gerada pelo STM32CubeMX
}
